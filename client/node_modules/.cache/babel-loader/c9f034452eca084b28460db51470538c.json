{"ast":null,"code":"var _jsxFileName = \"/Users/nissimram/Desktop/Programming/echochamber/Echochamber/client/src/components/wordcloud/wordcloud.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./wordcloud.css\";\nimport gif from \"./../../media/tweetgifv7.gif\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ToolTip from \"./../tooltip/tooltip\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyCloud = props => {\n  _s();\n\n  const theme = createMuiTheme();\n  theme.typography.h2 = {\n    fontSize: \"2rem\",\n    \"@media (min-width:600px)\": {\n      fontSize: \"2.5rem\"\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      fontSize: \"3rem\"\n    }\n  };\n  const [clicked, setClick] = React.useState(false);\n\n  const activateToolTip = () => {\n    setClick(!clicked);\n  };\n\n  const determineFrequency = frequency => {\n    return frequency > 10 ? 10 : frequency;\n  };\n\n  const setFontSize = frequency => {\n    const width = window.innerWidth;\n    const small = 500; //px\n\n    const medium = 700;\n    const large = 1000;\n    let currentSize = 0; //if frequency over 10 then it will stil get sized with a frequency of 10\n\n    const freq = determineFrequency(frequency); //console.log(\"freq \" + freq)\n\n    if (width > large) {\n      //if large\n      currentSize = large;\n      const fontSize = currentSize / 130 * freq; //console.log(`${fontSize} , ${freq}`)\n\n      return `${fontSize}px`;\n    }\n\n    if (width > medium && width < large) {\n      //if medium  (btw 700 and 1000)\n      currentSize = medium;\n      const fontSize = currentSize / 300 * freq; //console.log(`rendered ${fontSize} , ${freq}`)\n\n      return `${fontSize}px`;\n    }\n\n    if (width < medium) {\n      //if small\n      currentSize = small;\n      const fontSize = currentSize / 600 * (freq / 2); //console.log(`rendered ${fontSize} , ${freq}`)\n\n      return `${fontSize}px`;\n    }\n  }; // setFontSize(droplet.frequency)\n\n\n  function debounce(fn, ms) {\n    let timer;\n    return _ => {\n      clearTimeout(timer);\n      timer = setTimeout(_ => {\n        timer = null;\n        fn.apply(this, arguments);\n      }, ms);\n    };\n  } //RERENDERING FOR WINDOW CHANGE\n\n\n  const [dimensions, setDimensions] = React.useState({\n    height: window.innerHeight,\n    width: window.innerWidth\n  });\n  React.useEffect(() => {\n    const debouncedHandleResize = debounce(function handleResize() {\n      setDimensions({\n        height: window.innerHeight,\n        width: window.innerWidth\n      });\n    }, 1000);\n    window.addEventListener(\"resize\", debouncedHandleResize);\n    return _ => {\n      window.removeEventListener(\"resize\", debouncedHandleResize);\n    };\n  });\n  let counter = 0;\n\n  const checkForShove = () => {\n    console.log(counter); // console.log(\"hook \" + dimensions.width)\n    // console.log(\"vanilla \" + window.innerWidth)\n    //let styles = {};\n\n    if (counter > 260) {\n      // A ton of repeated words like when trying Bill Gates\n      console.log(\"BIG SHOVED!\"); //change to rectangle\n      //styles = Object.assign(styles, bigShoveStyles)\n\n      return \"cloudBigShove\";\n    }\n\n    console.log(window.screen.width);\n\n    if (counter > 235 && window.screen.width < 650) {\n      //if critical mass of words and if screen size small enough\n      console.log(\"----SHOVED!----\"); //change to rectangle\n\n      return \"cloudRegularShove\";\n      const regularShove = {\n        marginTop: \"100vh\",\n        height: \"800px\",\n        borderRadius: \"5px\",\n        paddingBottom: \"20px\"\n      }; //styles = Object.assign(styles, regularShove)\n    } //console.log(styles)\n\n\n    return \"cloud\";\n  }; //{checkForShove}\n\n\n  const droplets = props.text.map(droplet => ( //setCounter(counter + droplet.frequency),\n  counter += droplet.frequency, /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ToolTip, {\n      word: droplet.word,\n      frequency: droplet.frequency,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"droplet\",\n        style: {\n          fontSize: setFontSize(droplet.frequency),\n          fontWeight: \"700\",\n          paddingLeft: \"2px\",\n          paddingRight: \"2px\"\n        },\n        onClick: activateToolTip,\n        children: [\" \", droplet.word]\n      }, props.text.indexOf(droplet), true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }, this)\n  }, props.text.indexOf(droplet), false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this))); // console.log(props.text)\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 1,\n    justify: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cloudWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cloudTitle\",\n        children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n          theme: theme,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h2\",\n            children: [\" \", \"Word Cloud of what \", props.authorName, \" sees\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outerContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: gif,\n          alt: \"tweetGif\",\n          style: {\n            borderRadius: \"16px\",\n            float: \"left\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cloud\",\n          className: checkForShove(),\n          children: droplets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}; // {droplets}\n\n\n_s(MyCloud, \"+5sMWjIR13aZIBjV5uSQWo0LaMg=\");\n\n_c = MyCloud;\nexport default MyCloud;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCloud\");","map":{"version":3,"sources":["/Users/nissimram/Desktop/Programming/echochamber/Echochamber/client/src/components/wordcloud/wordcloud.js"],"names":["React","Typography","gif","Grid","ToolTip","createMuiTheme","ThemeProvider","MyCloud","props","theme","typography","h2","fontSize","breakpoints","up","clicked","setClick","useState","activateToolTip","determineFrequency","frequency","setFontSize","width","window","innerWidth","small","medium","large","currentSize","freq","debounce","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","dimensions","setDimensions","height","innerHeight","useEffect","debouncedHandleResize","handleResize","addEventListener","removeEventListener","counter","checkForShove","console","log","screen","regularShove","marginTop","borderRadius","paddingBottom","droplets","text","map","droplet","word","fontWeight","paddingLeft","paddingRight","indexOf","authorName","float"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./wordcloud.css\";\nimport gif from \"./../../media/tweetgifv7.gif\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ToolTip from \"./../tooltip/tooltip\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nconst MyCloud = (props) => {\n  const theme = createMuiTheme();\n\n  theme.typography.h2 = {\n    fontSize: \"2rem\",\n    \"@media (min-width:600px)\": {\n      fontSize: \"2.5rem\",\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      fontSize: \"3rem\",\n    },\n  };\n\n  const [clicked, setClick] = React.useState(false);\n\n  const activateToolTip = () => {\n    setClick(!clicked);\n  };\n\n  const determineFrequency = (frequency) => {\n    return frequency > 10 ? 10 : frequency;\n  };\n\n  const setFontSize = (frequency) => {\n    const width = window.innerWidth;\n\n    const small = 500; //px\n    const medium = 700;\n    const large = 1000;\n    let currentSize = 0;\n\n    //if frequency over 10 then it will stil get sized with a frequency of 10\n\n    const freq = determineFrequency(frequency);\n    //console.log(\"freq \" + freq)\n    if (width > large) {\n      //if large\n      currentSize = large;\n\n      const fontSize = (currentSize / 130) * freq;\n      //console.log(`${fontSize} , ${freq}`)\n      return `${fontSize}px`;\n    }\n    if (width > medium && width < large) {\n      //if medium  (btw 700 and 1000)\n      currentSize = medium;\n      const fontSize = (currentSize / 300) * freq;\n      //console.log(`rendered ${fontSize} , ${freq}`)\n      return `${fontSize}px`;\n    }\n\n    if (width < medium) {\n      //if small\n      currentSize = small;\n      const fontSize = (currentSize / 600) * (freq / 2);\n      //console.log(`rendered ${fontSize} , ${freq}`)\n      return `${fontSize}px`;\n    }\n  };\n\n  // setFontSize(droplet.frequency)\n\n  function debounce(fn, ms) {\n    let timer;\n    return (_) => {\n      clearTimeout(timer);\n      timer = setTimeout((_) => {\n        timer = null;\n        fn.apply(this, arguments);\n      }, ms);\n    };\n  }\n\n  //RERENDERING FOR WINDOW CHANGE\n\n  const [dimensions, setDimensions] = React.useState({\n    height: window.innerHeight,\n    width: window.innerWidth,\n  });\n  React.useEffect(() => {\n    const debouncedHandleResize = debounce(function handleResize() {\n      setDimensions({\n        height: window.innerHeight,\n        width: window.innerWidth,\n      });\n    }, 1000);\n\n    window.addEventListener(\"resize\", debouncedHandleResize);\n    return (_) => {\n      window.removeEventListener(\"resize\", debouncedHandleResize);\n    };\n  });\n\n  let counter = 0;\n\n  const checkForShove = () => {\n    console.log(counter);\n    // console.log(\"hook \" + dimensions.width)\n    // console.log(\"vanilla \" + window.innerWidth)\n    //let styles = {};\n    if (counter > 260) {\n      // A ton of repeated words like when trying Bill Gates\n      console.log(\"BIG SHOVED!\"); //change to rectangle\n\n      //styles = Object.assign(styles, bigShoveStyles)\n      return \"cloudBigShove\";\n    }\n    console.log(window.screen.width);\n    if (counter > 235 && window.screen.width < 650) {\n      //if critical mass of words and if screen size small enough\n      console.log(\"----SHOVED!----\"); //change to rectangle\n      return \"cloudRegularShove\";\n      const regularShove = {\n        marginTop: \"100vh\",\n        height: \"800px\",\n        borderRadius: \"5px\",\n        paddingBottom: \"20px\",\n      };\n      //styles = Object.assign(styles, regularShove)\n    }\n    //console.log(styles)\n    return \"cloud\";\n  };\n\n  //{checkForShove}\n\n  const droplets = props.text.map(\n    (droplet) => (\n      //setCounter(counter + droplet.frequency),\n      (counter += droplet.frequency),\n      (\n        <div key={props.text.indexOf(droplet)}>\n          <ToolTip word={droplet.word} frequency={droplet.frequency}>\n            <div\n              key={props.text.indexOf(droplet)}\n              className=\"droplet\"\n              style={{\n                fontSize: setFontSize(droplet.frequency),\n                fontWeight: \"700\",\n                paddingLeft: \"2px\",\n                paddingRight: \"2px\",\n              }}\n              onClick={activateToolTip}\n            >\n              {\" \"}\n              {droplet.word}\n            </div>\n          </ToolTip>\n        </div>\n      )\n    )\n  );\n\n  // console.log(props.text)\n\n  return (\n    <Grid container direction=\"column\" spacing={1} justify=\"center\">\n      <div className=\"cloudWrapper\">\n        <div className=\"cloudTitle\">\n          <ThemeProvider theme={theme}>\n            <Typography variant=\"h2\">\n              {\" \"}\n              Word Cloud of what {props.authorName} sees{\" \"}\n            </Typography>\n          </ThemeProvider>\n        </div>\n\n        <div className=\"outerContainer\">\n          <img\n            src={gif}\n            alt=\"tweetGif\"\n            style={{ borderRadius: \"16px\", float: \"left\" }}\n          />\n\n          <div className=\"cloud\" className={checkForShove()}>\n            {droplets}\n          </div>\n        </div>\n      </div>\n    </Grid>\n  );\n};\n// {droplets}\n\nexport default MyCloud;\n"]},"metadata":{},"sourceType":"module"}