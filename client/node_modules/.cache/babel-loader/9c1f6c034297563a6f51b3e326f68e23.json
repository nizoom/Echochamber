{"ast":null,"code":"var _jsxFileName = \"/Users/nissimram/Desktop/Programming/Enter-the-Echo-Chamber/client/src/components/input/input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport \"./input.css\";\nimport Grid from '@material-ui/core/Grid';\nimport GetRandomAcctBtn from \"./randomize/getrandomacctbtn\";\nimport BlobLoader from \"./blob/blob\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = props => {\n  _s();\n\n  const useStyles = makeStyles(theme => ({\n    //button styling\n    root: {\n      color: \"#89EBCF\",\n      borderColor: \"#89EBCF\",\n      fontSize: \"1.5em\",\n      borderWidth: \"5px\",\n      height: \"70px\",\n      // [theme.breakpoints.up('xs')]: {\n      //     marginTop: '10px',\n      // },\n      '&:hover': {\n        color: \"#89EBCF\",\n        borderColor: \"#89EB90\",\n        fontSize: \"1.5em\",\n        borderWidth: \"5px\"\n      }\n    }\n  }));\n  const classes = useStyles();\n  const [inputContent, setInputContent] = useState(\"\");\n  const [validity, setValidity] = useState(true);\n\n  const handleChange = event => {\n    let usernameAttempt = event.target.value;\n    setInputContent(usernameAttempt);\n  };\n\n  const passSubmitted = name => {\n    console.log(\"passed\");\n    props.handleInput(name); //reset for next search\n\n    setValidity(true);\n  };\n\n  const checkValidity = () => {\n    console.log(validity);\n    const regex = /[^a-zA-Z\\d\\s_]/; // if inputContent is empty -> invalid \n\n    if (inputContent === \"\") {\n      console.log(\"stopped 1\");\n      return setValidity(false);\n    } // if inputContent contains non alphanumeric chars except dashes  -> invalid \n\n\n    if (regex.test(inputContent)) {\n      console.log(\"stopped 2\");\n      return setValidity(false);\n    } // if inputContent is less than 4 and no more than 15 chars long \n\n\n    if (inputContent.length < 4 || inputContent.length > 15) {\n      console.log(\"stopped 3\");\n      return setValidity(false);\n    }\n\n    passSubmitted(inputContent); // no if needed because of the returns earlier on would \n    //catch everything else \n    // if (validity) { // problem is its not valid here \n    //     console.log(validity)\n    //     passSubmitted(inputContent)\n    // }\n    //reset for next search\n\n    return setValidity(true);\n  };\n\n  const getRandomNameFromChild = randomeName => {\n    setInputContent(randomeName);\n    console.log(randomeName);\n    passSubmitted(randomeName);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inputWrapper\",\n    children: props.loadingStatus ? /*#__PURE__*/_jsxDEV(BlobLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 36\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"space-evenly\",\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(GetRandomAcctBtn, {\n          sendName: getRandomNameFromChild\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this), \"  \", /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"#E1CEEC\",\n            fontWeight: \"600\",\n            padding: \"0\",\n            margin: \"0\",\n            marginTop: \"20px\",\n            fontSize: \"1.2em\"\n          },\n          children: \" OR \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"standard-basic\",\n          name: \"twitterInput\",\n          onChange: handleChange,\n          style: {\n            backgroundColor: \"#C9B7E2\",\n            borderRadius: \"5%\",\n            opacity: \".8\"\n          },\n          label: \"TwitterHandle\",\n          InputLabelProps: {\n            className: \"textfield___label\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          size: \"large\",\n          onClick: checkValidity,\n          className: classes.root,\n          children: \" Submit \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), validity ? null : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error__message\",\n          children: \" Handle must be 4 to 15 characters of only numbers, letters, and underscores \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Input, \"iUSiGAHKNxjvZi4vL/9yYWNJ5xg=\", true);\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/nissimram/Desktop/Programming/Enter-the-Echo-Chamber/client/src/components/input/input.js"],"names":["React","useState","TextField","Button","makeStyles","Grid","GetRandomAcctBtn","BlobLoader","Input","props","useStyles","theme","root","color","borderColor","fontSize","borderWidth","height","classes","inputContent","setInputContent","validity","setValidity","handleChange","event","usernameAttempt","target","value","passSubmitted","name","console","log","handleInput","checkValidity","regex","test","length","getRandomNameFromChild","randomeName","loadingStatus","fontWeight","padding","margin","marginTop","backgroundColor","borderRadius","opacity","className"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport \"./input.css\"\nimport Grid from '@material-ui/core/Grid';\n\nimport GetRandomAcctBtn from \"./randomize/getrandomacctbtn\"\nimport BlobLoader from \"./blob/blob\";\n\n\nconst Input = (props) => {\n\n    const useStyles = makeStyles(theme => ({ //button styling\n        root: {\n            color: \"#89EBCF\",\n            borderColor: \"#89EBCF\",\n            fontSize: \"1.5em\",\n            borderWidth: \"5px\",\n            height: \"70px\",\n            // [theme.breakpoints.up('xs')]: {\n            //     marginTop: '10px',\n            // },\n\n\n            '&:hover': {\n                color: \"#89EBCF\",\n                borderColor: \"#89EB90\",\n                fontSize: \"1.5em\",\n                borderWidth: \"5px\",\n            },\n\n        }\n    }));\n\n    const classes = useStyles();\n\n    const [inputContent, setInputContent] = useState(\"\");\n\n    const [validity, setValidity] = useState(true);\n\n    const handleChange = (event) => {\n        let usernameAttempt = event.target.value;\n        setInputContent(usernameAttempt);\n    }\n\n    const passSubmitted = (name) => {\n        console.log(\"passed\")\n        props.handleInput(name);\n        //reset for next search\n        setValidity(true)\n    }\n\n    const checkValidity = () => {\n\n\n\n        console.log(validity)\n\n        const regex = /[^a-zA-Z\\d\\s_]/\n        // if inputContent is empty -> invalid \n        if (inputContent === \"\") {\n            console.log(\"stopped 1\")\n            return setValidity(false);\n        }\n        // if inputContent contains non alphanumeric chars except dashes  -> invalid \n\n        if (regex.test(inputContent)) {\n            console.log(\"stopped 2\")\n            return setValidity(false);\n        }\n\n        // if inputContent is less than 4 and no more than 15 chars long \n        if (inputContent.length < 4 || inputContent.length > 15) {\n            console.log(\"stopped 3\")\n            return setValidity(false);\n        }\n\n        passSubmitted(inputContent) // no if needed because of the returns earlier on would \n        //catch everything else \n\n        // if (validity) { // problem is its not valid here \n        //     console.log(validity)\n        //     passSubmitted(inputContent)\n        // }\n\n        //reset for next search\n\n        return setValidity(true)\n    }\n\n\n\n    const getRandomNameFromChild = (randomeName) => {\n        setInputContent(randomeName)\n        console.log(randomeName)\n        passSubmitted(randomeName)\n    }\n\n    return (\n\n        <div className=\"inputWrapper\">\n\n            {props.loadingStatus ? <BlobLoader /> :\n                <Grid container direction=\"row\" justify=\"space-evenly\" spacing={4}>\n\n\n\n\n                    <Grid item xs={12}>\n\n\n\n                        <GetRandomAcctBtn sendName={getRandomNameFromChild}\n\n                        />  <p style={{\n                            color: \"#E1CEEC\", fontWeight: \"600\", padding: \"0\", margin: \"0\", marginTop: \"20px\",\n                            fontSize: \"1.2em\"\n                        }}\n\n\n                        > OR </p>\n                    </Grid>\n\n                    <Grid item >\n                        <TextField id=\"standard-basic\"\n\n                            name=\"twitterInput\"\n                            onChange={handleChange}\n                            style={{\n                                backgroundColor: \"#C9B7E2\",\n                                borderRadius: \"5%\",\n                                opacity: \".8\"\n                            }}\n                            label=\"TwitterHandle\"\n                            InputLabelProps={{ className: \"textfield___label\" }}\n                        />\n                    </Grid>\n\n                    <Grid item>\n                        <Button variant=\"outlined\" color=\"primary\" size=\"large\"\n                            onClick={checkValidity}\n                            className={classes.root}\n                        > Submit </Button>\n\n                        {validity ? null : <p\n                            className=\"error__message\"\n                        > Handle must be 4 to 15 characters of only numbers, letters, and underscores </p>}\n                    </Grid>\n\n\n\n                </Grid>\n            }\n\n        </div >\n    )\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}