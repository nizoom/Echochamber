{"ast":null,"code":"var _jsxFileName = \"/Users/nissimram/Desktop/Programming/Twitter Project/twitter-project/client/src/components/wordcloud/wordcloud.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport \"./wordcloud.css\";\nimport gif from \"./../../media/tweetgifv7.gif\";\nimport Grid from '@material-ui/core/Grid';\nimport ToolTip from \"./../tooltip/tooltip\";\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyCloud = props => {\n  _s();\n\n  const theme = createMuiTheme();\n  theme.typography.h2 = {\n    fontSize: '2rem',\n    '@media (min-width:600px)': {\n      fontSize: '2.5rem'\n    },\n    [theme.breakpoints.up('md')]: {\n      fontSize: '3rem'\n    }\n  };\n  const [clicked, setClick] = React.useState(false);\n\n  const activateToolTip = () => {\n    setClick(!clicked);\n  };\n\n  const determineFrequency = frequency => {\n    return frequency > 10 ? 10 : frequency;\n  };\n\n  const setFontSize = frequency => {\n    const width = window.innerWidth;\n    const small = 500; //px\n\n    const medium = 700;\n    const large = 1000;\n    let currentSize = 0; //if frequency over 10 then it will stil get sized with a frequency of 10\n\n    const freq = determineFrequency(frequency);\n    console.log(\"freq \" + freq);\n\n    if (width > large) {\n      //if large \n      currentSize = large;\n      const fontSize = currentSize / 130 * freq; //console.log(`${fontSize} , ${freq}`)\n\n      return `${fontSize}px`;\n    }\n\n    if (width > medium && width < large) {\n      //if medium  (btw 700 and 1000)\n      currentSize = medium;\n      const fontSize = currentSize / 300 * freq; //console.log(`rendered ${fontSize} , ${freq}`)\n\n      return `${fontSize}px`;\n    }\n\n    if (width < medium) {\n      //if small \n      currentSize = small;\n      const fontSize = currentSize / 600 * (freq / 2);\n      console.log(`rendered ${fontSize} , ${freq}`);\n      return `${fontSize}px`;\n    }\n  }; // setFontSize(droplet.frequency)\n\n\n  function debounce(fn, ms) {\n    let timer;\n    return _ => {\n      clearTimeout(timer);\n      timer = setTimeout(_ => {\n        timer = null;\n        fn.apply(this, arguments);\n      }, ms);\n    };\n  } //RERENDERING FOR WINDOW CHANGE\n\n\n  const [dimensions, setDimensions] = React.useState({\n    height: window.innerHeight,\n    width: window.innerWidth\n  });\n  React.useEffect(() => {\n    const debouncedHandleResize = debounce(function handleResize() {\n      setDimensions({\n        height: window.innerHeight,\n        width: window.innerWidth\n      });\n    }, 1000);\n    window.addEventListener('resize', debouncedHandleResize);\n    return _ => {\n      window.removeEventListener('resize', debouncedHandleResize);\n    };\n  });\n  let counter = 0;\n\n  const checkForShove = () => {\n    console.log(counter); // console.log(\"hook \" + dimensions.width)\n    // console.log(\"vanilla \" + window.innerWidth)\n\n    let styles = {};\n\n    if (counter > 260) {\n      // A ton of repeated words like when trying Bill Gates \n      console.log(\"BIG SHOVED!\"); //change to rectangle \n\n      const bigShoveStyles = {\n        marginTop: \"250vh\",\n        height: \"800px\",\n        borderRadius: \"5px\",\n        paddingBottom: \"20px\",\n        fontWeight: \"300\",\n        width: \"60%\"\n      };\n      styles = Object.assign(styles, bigShoveStyles);\n    }\n\n    if (counter > 235 && window.innerWidth < 650) {\n      //if critical mass of words and if screen size small enough\n      console.log(\"SHOVED!\"); //change to rectangle \n\n      const regularShove = {\n        marginTop: \"100vh\",\n        height: \"800px\",\n        borderRadius: \"5px\",\n        paddingBottom: \"20px\"\n      };\n      styles = Object.assign(styles, regularShove);\n    }\n\n    console.log(styles);\n    return styles;\n  }; //{checkForShove}\n\n\n  const droplets = props.text.map(droplet => ( //setCounter(counter + droplet.frequency),\n  counter += droplet.frequency, /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ToolTip, {\n      word: droplet.word,\n      frequency: droplet.frequency,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"droplet\",\n        style: {\n          fontSize: setFontSize(droplet.frequency),\n          fontWeight: \"700\",\n          paddingLeft: \"2px\",\n          paddingRight: \"2px\"\n        },\n        onClick: activateToolTip,\n        children: [\"  \", droplet.word]\n      }, props.text.indexOf(droplet), true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)\n  }, props.text.indexOf(droplet), false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this))); // console.log(props.text)\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    spacing: 1,\n    justify: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cloudWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cloudTitle\",\n        children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n          theme: theme,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h2\",\n            children: [\" Word Cloud of what \", props.authorName, \" sees \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outerContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: gif,\n          alt: \"tweetGif\",\n          style: {\n            borderRadius: \"16px\",\n            float: \"left\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cloud\",\n          styles: checkForShove(),\n          children: droplets\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n}; // {droplets}\n\n\n_s(MyCloud, \"gkPFI9vnk1SISQAl5pxHI8F4pCY=\");\n\n_c = MyCloud;\nexport default MyCloud;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyCloud\");","map":{"version":3,"sources":["/Users/nissimram/Desktop/Programming/Twitter Project/twitter-project/client/src/components/wordcloud/wordcloud.js"],"names":["React","Typography","gif","Grid","ToolTip","createMuiTheme","ThemeProvider","MyCloud","props","theme","typography","h2","fontSize","breakpoints","up","clicked","setClick","useState","activateToolTip","determineFrequency","frequency","setFontSize","width","window","innerWidth","small","medium","large","currentSize","freq","console","log","debounce","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","dimensions","setDimensions","height","innerHeight","useEffect","debouncedHandleResize","handleResize","addEventListener","removeEventListener","counter","checkForShove","styles","bigShoveStyles","marginTop","borderRadius","paddingBottom","fontWeight","Object","assign","regularShove","droplets","text","map","droplet","word","paddingLeft","paddingRight","indexOf","authorName","float"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport \"./wordcloud.css\"\nimport gif from \"./../../media/tweetgifv7.gif\"\nimport Grid from '@material-ui/core/Grid';\nimport ToolTip from \"./../tooltip/tooltip\"\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n\n\nconst MyCloud = (props) => {\n\n    const theme = createMuiTheme();\n\n    theme.typography.h2 = {\n        fontSize: '2rem',\n        '@media (min-width:600px)': {\n            fontSize: '2.5rem',\n        },\n        [theme.breakpoints.up('md')]: {\n            fontSize: '3rem',\n        },\n    };\n\n    const [clicked, setClick] = React.useState(false)\n\n    const activateToolTip = () => {\n        setClick(!clicked)\n    }\n\n    const determineFrequency = (frequency) => {\n        return (frequency > 10 ? 10 : frequency)\n    }\n\n\n    const setFontSize = (frequency) => {\n\n        const width = window.innerWidth\n\n        const small = 500 //px\n        const medium = 700\n        const large = 1000\n        let currentSize = 0;\n\n        //if frequency over 10 then it will stil get sized with a frequency of 10\n\n        const freq = determineFrequency(frequency)\n        console.log(\"freq \" + freq)\n        if (width > large) { //if large \n            currentSize = large;\n\n            const fontSize = currentSize / 130 * freq\n            //console.log(`${fontSize} , ${freq}`)\n            return `${fontSize}px`\n\n        }\n        if (width > medium && width < large) { //if medium  (btw 700 and 1000)\n            currentSize = medium;\n            const fontSize = currentSize / 300 * freq\n            //console.log(`rendered ${fontSize} , ${freq}`)\n            return `${fontSize}px`\n        }\n\n        if (width < medium) { //if small \n            currentSize = small;\n            const fontSize = currentSize / 600 * (freq / 2)\n            console.log(`rendered ${fontSize} , ${freq}`)\n            return `${fontSize}px`\n        }\n\n    }\n\n    // setFontSize(droplet.frequency)\n\n    function debounce(fn, ms) {\n        let timer\n        return _ => {\n            clearTimeout(timer)\n            timer = setTimeout(_ => {\n                timer = null\n                fn.apply(this, arguments)\n            }, ms)\n        };\n    }\n\n\n\n\n    //RERENDERING FOR WINDOW CHANGE\n\n    const [dimensions, setDimensions] = React.useState({\n        height: window.innerHeight,\n        width: window.innerWidth\n    })\n    React.useEffect(() => {\n        const debouncedHandleResize = debounce(function handleResize() {\n            setDimensions({\n                height: window.innerHeight,\n                width: window.innerWidth\n            })\n        }, 1000)\n\n        window.addEventListener('resize', debouncedHandleResize)\n        return _ => {\n            window.removeEventListener('resize', debouncedHandleResize)\n\n        }\n    })\n\n\n\n    let counter = 0\n\n\n    const checkForShove = () => {\n        console.log(counter)\n        // console.log(\"hook \" + dimensions.width)\n        // console.log(\"vanilla \" + window.innerWidth)\n        let styles = {};\n        if (counter > 260) { // A ton of repeated words like when trying Bill Gates \n            console.log(\"BIG SHOVED!\") //change to rectangle \n            const bigShoveStyles = {\n                marginTop: \"250vh\", height: \"800px\", borderRadius: \"5px\",\n                paddingBottom: \"20px\", fontWeight: \"300\", width: \"60%\"\n            }\n            styles = Object.assign(styles, bigShoveStyles)\n        }\n        if (counter > 235 && window.innerWidth < 650) { //if critical mass of words and if screen size small enough\n            console.log(\"SHOVED!\") //change to rectangle \n            const regularShove = {\n                marginTop: \"100vh\", height: \"800px\", borderRadius: \"5px\",\n                paddingBottom: \"20px\"\n            }\n            styles = Object.assign(styles, regularShove)\n\n        }\n        console.log(styles)\n        return styles;\n    }\n\n    //{checkForShove}\n\n    const droplets = props.text.map((droplet) => (\n\n        //setCounter(counter + droplet.frequency),\n        counter += droplet.frequency,\n\n        < div key={props.text.indexOf(droplet)} >\n            <ToolTip word={droplet.word} frequency={droplet.frequency}>\n                <div key={props.text.indexOf(droplet)} className=\"droplet\"\n                    style={{ fontSize: setFontSize(droplet.frequency), fontWeight: \"700\", paddingLeft: \"2px\", paddingRight: \"2px\" }}\n                    onClick={activateToolTip}\n\n                >  {droplet.word}\n                </div>\n\n            </ToolTip>\n\n\n\n        </div >\n\n\n    ))\n\n    // console.log(props.text)\n\n\n\n    return (\n        <Grid container direction=\"column\" spacing={1} justify=\"center\">\n            <div className=\"cloudWrapper\" >\n\n                <div className=\"cloudTitle\">\n                    <ThemeProvider theme={theme}>\n                        <Typography variant=\"h2\"> Word Cloud of what {props.authorName} sees </Typography>\n                    </ThemeProvider>\n                </div>\n\n\n                <div className=\"outerContainer\">\n\n                    <img src={gif} alt=\"tweetGif\" style={{ borderRadius: \"16px\", float: \"left\" }} />\n\n\n\n                    <div className=\"cloud\" styles={checkForShove()} >\n\n                        {droplets}\n\n                    </div>\n                </div>\n\n\n\n            </div >\n        </Grid >\n    );\n\n}\n// {droplets}\n\nexport default MyCloud;\n\n"]},"metadata":{},"sourceType":"module"}