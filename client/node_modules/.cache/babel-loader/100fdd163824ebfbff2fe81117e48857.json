{"ast":null,"code":"var _jsxFileName = \"/Users/nissimram/Desktop/Programming/Twitter Project/twitter-project/client/src/components/input/input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { MuiThemeProvider, makeStyles } from '@material-ui/core/styles';\nimport \"./input.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = props => {\n  _s();\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n      color: \"#89EBCF\",\n      borderColor: \"#89EBCF\",\n      fontSize: \"1.5em\",\n      borderWidth: \"5px\",\n      '&:hover': {\n        color: \"#89EBCF\",\n        borderColor: \"#89EBCF\",\n        fontSize: \"1.5em\",\n        borderWidth: \"5px\"\n      }\n    }\n  }));\n  const classes = useStyles();\n  const [inputContent, setInputContent] = useState(\"\");\n  const [validity, setValidity] = useState(true);\n\n  const handleChange = event => {\n    let usernameAttempt = event.target.value;\n    setInputContent(usernameAttempt);\n  };\n\n  const passSubmitted = () => {\n    console.log(\"passed\");\n    props.handleInput(inputContent); //reset for next search\n\n    setValidity(true);\n  };\n\n  const checkValidity = () => {\n    console.log(validity);\n    const regex = /[^a-zA-Z\\d\\s_]/; // if inputContent is empty -> invalid \n\n    if (inputContent === \"\") {\n      console.log(\"stopped 1\");\n      return setValidity(false);\n    } // if inputContent contains non alphanumeric chars except dashes  -> invalid \n\n\n    if (regex.test(inputContent)) {\n      console.log(\"stopped 2\");\n      return setValidity(false);\n    } // if inputContent is less than 4 and no more than 15 chars long \n\n\n    if (inputContent.length < 4 || inputContent.length > 15) {\n      console.log(\"stopped 3\");\n      return setValidity(false);\n    }\n\n    if (validity) {\n      console.log(validity);\n      passSubmitted();\n    } //reset for next search\n\n\n    return setValidity(true);\n  }; //    <InputLabel style={{ color: \"white\", fontWeight: \"bold\", }}\n  //                 htmlFor=\"twitterInput\"\n  //             > Twitter Handle </InputLabel>\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"standard-basic\",\n      name: \"twitterInput\",\n      onChange: handleChange,\n      style: {\n        backgroundColor: \"#C9B7E2\",\n        borderRadius: \"5%\"\n      },\n      label: \"TwitterHandle\",\n      InputLabelProps: {\n        className: \"textfield___label\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      size: \"large\",\n      style: {\n        marginLeft: \"25px\",\n        marginTop: \"15px\"\n      },\n      onClick: checkValidity,\n      className: classes.root,\n      children: \" Submit \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), validity ? null : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error__message\",\n      children: \" Handle must be 4 to 15 characters of only numbers, letters, and underscores \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Input, \"iUSiGAHKNxjvZi4vL/9yYWNJ5xg=\", true);\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/nissimram/Desktop/Programming/Twitter Project/twitter-project/client/src/components/input/input.js"],"names":["React","useState","TextField","Button","MuiThemeProvider","makeStyles","Input","props","useStyles","theme","root","color","borderColor","fontSize","borderWidth","classes","inputContent","setInputContent","validity","setValidity","handleChange","event","usernameAttempt","target","value","passSubmitted","console","log","handleInput","checkValidity","regex","test","length","backgroundColor","borderRadius","className","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport { MuiThemeProvider, makeStyles } from '@material-ui/core/styles';\nimport \"./input.css\"\n\nconst Input = (props) => {\n\n    const useStyles = makeStyles(theme => ({\n        root: {\n            color: \"#89EBCF\",\n            borderColor: \"#89EBCF\",\n            fontSize: \"1.5em\",\n            borderWidth: \"5px\",\n            '&:hover': {\n                color: \"#89EBCF\",\n                borderColor: \"#89EBCF\",\n                fontSize: \"1.5em\",\n                borderWidth: \"5px\",\n            },\n\n        }\n    }));\n\n    const classes = useStyles();\n\n    const [inputContent, setInputContent] = useState(\"\");\n\n    const [validity, setValidity] = useState(true);\n\n    const handleChange = (event) => {\n        let usernameAttempt = event.target.value;\n        setInputContent(usernameAttempt);\n    }\n\n    const passSubmitted = () => {\n        console.log(\"passed\")\n        props.handleInput(inputContent);\n        //reset for next search\n        setValidity(true)\n    }\n\n    const checkValidity = () => {\n\n        console.log(validity)\n\n        const regex = /[^a-zA-Z\\d\\s_]/\n        // if inputContent is empty -> invalid \n        if (inputContent === \"\") {\n            console.log(\"stopped 1\")\n            return setValidity(false);\n        }\n        // if inputContent contains non alphanumeric chars except dashes  -> invalid \n\n        if (regex.test(inputContent)) {\n            console.log(\"stopped 2\")\n            return setValidity(false);\n        }\n\n        // if inputContent is less than 4 and no more than 15 chars long \n        if (inputContent.length < 4 || inputContent.length > 15) {\n            console.log(\"stopped 3\")\n            return setValidity(false);\n        }\n\n        if (validity) {\n            console.log(validity)\n            passSubmitted()\n        }\n\n        //reset for next search\n        return setValidity(true)\n    }\n\n\n    //    <InputLabel style={{ color: \"white\", fontWeight: \"bold\", }}\n    //                 htmlFor=\"twitterInput\"\n    //             > Twitter Handle </InputLabel>\n\n    return (\n\n        <div>\n\n\n\n            <TextField id=\"standard-basic\"\n                name=\"twitterInput\"\n                onChange={handleChange}\n                style={{\n                    backgroundColor: \"#C9B7E2\",\n                    borderRadius: \"5%\"\n                }}\n                label=\"TwitterHandle\"\n                InputLabelProps={{ className: \"textfield___label\" }}\n            />\n\n\n            <Button variant=\"outlined\" color=\"primary\" size=\"large\"\n                style={{ marginLeft: \"25px\", marginTop: \"15px\" }}\n                onClick={checkValidity}\n                className={classes.root}\n            > Submit </Button>\n\n            {validity ? null : <p\n                className=\"error__message\"\n            > Handle must be 4 to 15 characters of only numbers, letters, and underscores </p>}\n        </div >\n    )\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}